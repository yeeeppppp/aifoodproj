import React, { useState, useRef, useEffect, useContext } from 'react';
import { useMediaQuery } from 'react-responsive';
import { CartContext } from '../Carousel/CartContext';
import "./LLamaChat.css";

function LLamaChat() {
    const [messages, setMessages] = useState([]);
    const [inputText, setInputText] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isCollapsed, setIsCollapsed] = useState(false);
    const [isCartCollapsed, setIsCartCollapsed] = useState(false);
    const messagesEndRef = useRef(null);
    const { cart, setCart } = useContext(CartContext);

    const isLaptop = useMediaQuery({ minWidth: 1024, maxWidth: 1440 });
    const isMobile = useMediaQuery({ maxWidth: 768 });

    useEffect(() => {
        if (isMobile) {
            setIsCollapsed(true); // Сворачиваем чат на мобильных
            setIsCartCollapsed(false); // Корзина открыта
        } else if (isLaptop) {
            setIsCollapsed(false); // Разворачиваем чат на ноутбуках
            setIsCartCollapsed(true); // Корзина свернута по умолчанию
        }
    }, [isMobile, isLaptop]);

    const API_KEY = "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6ImIwYTA4NTJjLTI3MDYtNGQ1Mi1iNmVjLWI2Y2E2MTQ4YjE4NCIsImV4cCI6NDkxMjc4MzY5Mn0.MvmbdN8WgCqLHVUBKdzP2fw3OdI_IOJQNeIKRZzi65KaD_WUEP1xAe7x1R4LMyoDvAlOHNYF_A54vVSZv-cXHA";
    const API_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions";

    const fetchAIResponse = async (userMessage) => {
        try {
            // Формируем массив сообщений с историей
            const messageHistory = [
                {
                    role: "system",
                    content: `Ты помощник для заказа продуктов в магазине.
                            Отвечай на русском языке кратко и полезно.
                            Помогай выбирать продукты, учитывай аллергии,
                            предлагай рецепты и помогай с составлением корзины.
                            Пиши без Markdown опций или иных инструментов форматирования
                            текста.`
                },
                ...messages.map(msg => ({
                    role: msg.isUser ? "user" : "assistant",
                    content: msg.text
                })),
                { role: "user", content: userMessage }
            ];

            const response = await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify({
                    model: "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",
                    messages: messageHistory, // Передаем всю историю
                    max_tokens: 1000,
                    temperature: 0.7,
                    stream: false,
                    reasoning: false
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            return data.choices[0].message.content;

        } catch (error) {
            return `Ошибка: ${error.message}`;
        }
    };

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const handleSend = async () => {
        if (inputText.trim() === '' || isLoading) return;

        const userMessage = { text: inputText, isUser: true };
        setMessages(prev => [...prev, userMessage]);
        setInputText('');
        setIsLoading(true);

        const aiResponse = await fetchAIResponse(inputText);

        setMessages(prev => [...prev, { text: aiResponse, isUser: false }]);
        setIsLoading(false);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    const toggleChat = () => {
        setIsCollapsed(!isCollapsed);
    };

    const toggleCart = () => {
        setIsCartCollapsed(!isCartCollapsed);
    };

    const totalCost = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

    return (
        <>
            <div className={`chat-container ${isCollapsed ? 'chat-container-collapsed' : ''} ${isLaptop ? 'laptop' : ''}`}>
                <div className="zagalovok" onClick={toggleChat}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="141" height="34" viewBox="0 0 141 34" fill="none">
                        <path d="M0.803579 32V26.7477H2.87237C3.43088 26.7477 3.87086 26.8685 4.19229 27.1101C4.516 27.3518 4.67786 27.6778 4.67786 28.0881C4.67786 28.4004 4.58781 28.65 4.40772 28.837C4.22762 29.0239 3.98598 29.1561 3.68279 29.2336C3.88567 29.2678 4.07375 29.3419 4.247 29.4559C4.42253 29.5699 4.56501 29.7203 4.67444 29.9073C4.78386 30.0942 4.83857 30.3176 4.83857 30.5775C4.83857 30.8511 4.77018 31.095 4.6334 31.3093C4.49662 31.5236 4.30399 31.6922 4.05551 31.8153C3.80703 31.9384 3.51295 32 3.17328 32H0.803579ZM1.38489 31.4358H3.17328C3.49471 31.4358 3.7489 31.3537 3.93583 31.1896C4.12276 31.0232 4.21622 30.802 4.21622 30.5262C4.21622 30.2321 4.12732 29.9973 3.9495 29.8218C3.77397 29.644 3.53803 29.5551 3.24167 29.5551H1.38489V31.4358ZM1.38489 29.0148H2.90998C3.14707 29.0148 3.35223 28.9783 3.52549 28.9054C3.69874 28.8324 3.8321 28.7298 3.92557 28.5976C4.02131 28.4631 4.06805 28.3058 4.06577 28.1257C4.06577 27.8681 3.9609 27.6687 3.75117 27.5273C3.54145 27.3837 3.24851 27.3119 2.87237 27.3119H1.38489V29.0148ZM7.63998 32.1197C7.32311 32.1197 7.0336 32.0581 6.77143 31.935C6.50927 31.8096 6.30069 31.6296 6.14567 31.3948C5.99065 31.1577 5.91314 30.8704 5.91314 30.533C5.91314 30.2732 5.96216 30.0543 6.06018 29.8765C6.15821 29.6987 6.29727 29.5528 6.47736 29.4388C6.65745 29.3248 6.8706 29.2348 7.1168 29.1687C7.36301 29.1026 7.63428 29.0513 7.93064 29.0148C8.22472 28.9783 8.4732 28.9464 8.67609 28.919C8.88126 28.8917 9.03741 28.8484 9.14456 28.7891C9.2517 28.7298 9.30527 28.6341 9.30527 28.5019V28.3788C9.30527 28.0209 9.19813 27.7393 8.98384 27.5342C8.77183 27.3267 8.46636 27.223 8.06742 27.223C7.689 27.223 7.3801 27.3062 7.14074 27.4726C6.90365 27.639 6.73724 27.8351 6.64149 28.0608L6.0636 27.8522C6.18214 27.5649 6.34628 27.3358 6.55601 27.1648C6.76574 26.9916 7.00054 26.8674 7.26042 26.7921C7.5203 26.7146 7.7836 26.6759 8.05032 26.6759C8.25093 26.6759 8.45952 26.7021 8.67609 26.7545C8.89493 26.8069 9.09782 26.8981 9.28476 27.0281C9.47169 27.1557 9.62328 27.3347 9.73955 27.5649C9.85581 27.7929 9.91394 28.0824 9.91394 28.4335V32H9.30527V31.1691H9.26766C9.19471 31.3241 9.08643 31.4745 8.94281 31.6204C8.79919 31.7663 8.6191 31.886 8.40253 31.9795C8.18596 32.0729 7.93178 32.1197 7.63998 32.1197ZM7.72205 31.5623C8.04576 31.5623 8.32616 31.4905 8.56324 31.3469C8.80033 31.2033 8.9827 31.0129 9.11036 30.7758C9.2403 30.5365 9.30527 30.2732 9.30527 29.9859V29.2268C9.25968 29.2701 9.18331 29.3089 9.07617 29.3431C8.9713 29.3773 8.84934 29.408 8.71028 29.4354C8.5735 29.4605 8.43672 29.4821 8.29994 29.5004C8.16316 29.5186 8.04006 29.5346 7.93064 29.5482C7.63428 29.5847 7.38124 29.6417 7.17151 29.7192C6.96179 29.7967 6.80107 29.9039 6.68937 30.0406C6.57766 30.1751 6.52181 30.3484 6.52181 30.5604C6.52181 30.8795 6.63579 31.1269 6.86376 31.3024C7.09173 31.4757 7.37782 31.5623 7.72205 31.5623ZM11.5331 26.7477H12.1417V31.4255H14.296V26.7477H14.9047V31.4255H17.059V26.7477H17.6676V32H11.5331V26.7477ZM21.9967 32V26.7477H25.9736V32H25.3615V27.3221H22.6088V32H21.9967ZM29.7085 32.1094C29.2184 32.1094 28.7943 31.9954 28.4364 31.7675C28.0785 31.5372 27.8016 31.2192 27.6055 30.8134C27.4117 30.4054 27.3148 29.9358 27.3148 29.4046C27.3148 28.8757 27.4117 28.4061 27.6055 27.9958C27.8016 27.5832 28.0717 27.2606 28.4159 27.0281C28.7624 26.7933 29.1625 26.6759 29.6162 26.6759C29.9011 26.6759 30.1758 26.7283 30.4403 26.8332C30.7047 26.9357 30.9418 27.0942 31.1515 27.3085C31.3635 27.5205 31.5311 27.7883 31.6542 28.112C31.7773 28.4335 31.8388 28.8142 31.8388 29.2542V29.5551H27.7354V29.0182H31.2165C31.2165 28.6808 31.1481 28.3776 31.0113 28.1086C30.8768 27.8373 30.6887 27.6231 30.4471 27.4658C30.2077 27.3085 29.9307 27.2298 29.6162 27.2298C29.2833 27.2298 28.9904 27.3187 28.7373 27.4965C28.4843 27.6744 28.286 27.9092 28.1424 28.201C28.001 28.4927 27.9292 28.8119 27.9269 29.1584V29.4798C27.9269 29.897 27.9987 30.2618 28.1424 30.5741C28.2883 30.8841 28.4946 31.1246 28.7613 31.2956C29.028 31.4666 29.3437 31.552 29.7085 31.552C29.957 31.552 30.1747 31.5133 30.3616 31.4358C30.5508 31.3583 30.7093 31.2546 30.8369 31.1246C30.9669 30.9924 31.0649 30.8476 31.131 30.6903L31.7089 30.8784C31.6291 31.0995 31.498 31.3036 31.3156 31.4905C31.1355 31.6774 30.9099 31.8279 30.6386 31.9419C30.3696 32.0536 30.0596 32.1094 29.7085 32.1094ZM33.1801 33.9696V26.7477H33.7717V27.7496H33.8435C33.9164 27.5923 34.0168 27.4316 34.1444 27.2674C34.2721 27.101 34.4408 26.9608 34.6505 26.8468C34.8625 26.7329 35.1292 26.6759 35.4507 26.6759C35.8838 26.6759 36.2622 26.7898 36.5859 27.0178C36.9119 27.2435 37.165 27.5604 37.345 27.9684C37.5274 28.3742 37.6186 28.8472 37.6186 29.3875C37.6186 29.9301 37.5274 30.4054 37.345 30.8134C37.165 31.2215 36.9119 31.5395 36.5859 31.7675C36.2622 31.9954 35.8861 32.1094 35.4575 32.1094C35.1406 32.1094 34.875 32.0524 34.6608 31.9384C34.4487 31.8245 34.2766 31.6843 34.1444 31.5179C34.0145 31.3492 33.9142 31.185 33.8435 31.0254H33.7888V33.9696H33.1801ZM33.7819 29.3773C33.7819 29.8013 33.8446 30.1774 33.97 30.5057C34.0977 30.8317 34.2801 31.0881 34.5171 31.2751C34.7565 31.4597 35.046 31.552 35.3857 31.552C35.7345 31.552 36.0285 31.4563 36.2679 31.2648C36.5096 31.071 36.6931 30.81 36.8184 30.4817C36.9461 30.1535 37.0099 29.7853 37.0099 29.3773C37.0099 28.9738 36.9472 28.6102 36.8219 28.2864C36.6988 27.9627 36.5164 27.7063 36.2747 27.5171C36.0331 27.3256 35.7368 27.2298 35.3857 27.2298C35.0437 27.2298 34.7531 27.3221 34.5137 27.5068C34.2744 27.6892 34.092 27.9422 33.9666 28.2659C33.8435 28.5874 33.7819 28.9578 33.7819 29.3773ZM41.0056 32.1094C40.536 32.1094 40.1268 31.992 39.778 31.7572C39.4315 31.5224 39.1625 31.201 38.971 30.7929C38.7795 30.3849 38.6838 29.9198 38.6838 29.3978C38.6838 28.8712 38.7807 28.4027 38.9744 27.9924C39.1705 27.582 39.4418 27.2606 39.7883 27.0281C40.1348 26.7933 40.5371 26.6759 40.9953 26.6759C41.3464 26.6759 41.6644 26.7443 41.9494 26.881C42.2343 27.0155 42.4691 27.2059 42.6538 27.4521C42.8407 27.696 42.9581 27.981 43.006 28.307H42.3905C42.3267 28.0106 42.1728 27.7576 41.9289 27.5478C41.6872 27.3358 41.3795 27.2298 41.0056 27.2298C40.6705 27.2298 40.3741 27.321 40.1165 27.5034C39.8589 27.6835 39.6572 27.9354 39.5113 28.2591C39.3677 28.5805 39.2959 28.9532 39.2959 29.3773C39.2959 29.8036 39.3665 30.1808 39.5079 30.5091C39.6492 30.8351 39.8475 31.0904 40.1029 31.2751C40.3605 31.4597 40.6614 31.552 41.0056 31.552C41.2381 31.552 41.4501 31.5087 41.6416 31.4221C41.8354 31.3332 41.9973 31.2078 42.1272 31.046C42.2594 30.8841 42.3483 30.6915 42.3939 30.4681H43.0094C42.9638 30.7849 42.851 31.0676 42.6709 31.3161C42.4931 31.5623 42.2617 31.7561 41.9767 31.8974C41.6941 32.0388 41.3704 32.1094 41.0056 32.1094ZM46.3554 32.1094C45.9017 32.1094 45.5005 31.9943 45.1517 31.7641C44.8052 31.5338 44.5339 31.2158 44.3379 30.81C44.1418 30.402 44.0438 29.9312 44.0438 29.3978C44.0438 28.8598 44.1418 28.3867 44.3379 27.9787C44.5339 27.5683 44.8052 27.2492 45.1517 27.0212C45.5005 26.791 45.9017 26.6759 46.3554 26.6759C46.809 26.6759 47.2091 26.791 47.5556 27.0212C47.9021 27.2515 48.1734 27.5706 48.3695 27.9787C48.5678 28.3867 48.667 28.8598 48.667 29.3978C48.667 29.9312 48.5689 30.402 48.3729 30.81C48.1768 31.2158 47.9044 31.5338 47.5556 31.7641C47.2091 31.9943 46.809 32.1094 46.3554 32.1094ZM46.3554 31.552C46.7201 31.552 47.029 31.454 47.2821 31.258C47.5351 31.0619 47.7266 30.8009 47.8565 30.4749C47.9888 30.1489 48.0549 29.7899 48.0549 29.3978C48.0549 29.0057 47.9888 28.6455 47.8565 28.3172C47.7266 27.9889 47.5351 27.7256 47.2821 27.5273C47.029 27.329 46.7201 27.2298 46.3554 27.2298C45.9929 27.2298 45.684 27.329 45.4287 27.5273C45.1757 27.7256 44.983 27.9889 44.8508 28.3172C44.7209 28.6455 44.6559 29.0057 44.6559 29.3978C44.6559 29.7899 44.7209 30.1489 44.8508 30.4749C44.983 30.8009 45.1757 31.0619 45.4287 31.258C45.6817 31.454 45.9906 31.552 46.3554 31.552ZM53.5491 29.09V29.6645H50.4613V29.09H53.5491ZM50.6118 26.7477V32H50.0031V26.7477H50.6118ZM53.9971 26.7477V32H53.3884V26.7477H53.9971ZM57.084 32.1197C56.7671 32.1197 56.4776 32.0581 56.2155 31.935C55.9533 31.8096 55.7447 31.6296 55.5897 31.3948C55.4347 31.1577 55.3572 30.8704 55.3572 30.533C55.3572 30.2732 55.4062 30.0543 55.5042 29.8765C55.6022 29.6987 55.7413 29.5528 55.9214 29.4388C56.1015 29.3248 56.3146 29.2348 56.5608 29.1687C56.807 29.1026 57.0783 29.0513 57.3747 29.0148C57.6688 28.9783 57.9172 28.9464 58.1201 28.919C58.3253 28.8917 58.4815 28.8484 58.5886 28.7891C58.6957 28.7298 58.7493 28.6341 58.7493 28.5019V28.3788C58.7493 28.0209 58.6422 27.7393 58.4279 27.5342C58.2159 27.3267 57.9104 27.223 57.5115 27.223C57.133 27.223 56.8241 27.3062 56.5848 27.4726C56.3477 27.639 56.1813 27.8351 56.0855 28.0608L55.5076 27.8522C55.6262 27.5649 55.7903 27.3358 56 27.1648C56.2098 26.9916 56.4446 26.8674 56.7045 26.7921C56.9643 26.7146 57.2276 26.6759 57.4944 26.6759C57.695 26.6759 57.9036 26.7021 58.1201 26.7545C58.339 26.8069 58.5419 26.8981 58.7288 27.0281C58.9157 27.1557 59.0673 27.3347 59.1836 27.5649C59.2998 27.7929 59.358 28.0824 59.358 28.4335V32H58.7493V31.1691H58.7117C58.6387 31.3241 58.5305 31.4745 58.3868 31.6204C58.2432 31.7663 58.0631 31.886 57.8466 31.9795C57.63 32.0729 57.3758 32.1197 57.084 32.1197ZM57.1661 31.5623C57.4898 31.5623 57.7702 31.4905 58.0073 31.3469C58.2444 31.2033 58.4267 31.0129 58.5544 30.7758C58.6843 30.5365 58.7493 30.2732 58.7493 29.9859V29.2268C58.7037 29.2701 58.6273 29.3089 58.5202 29.3431C58.4153 29.3773 58.2934 29.408 58.1543 29.4354C58.0175 29.4605 57.8808 29.4821 57.744 29.5004C57.6072 29.5186 57.4841 29.5346 57.3747 29.5482C57.0783 29.5847 56.8253 29.6417 56.6156 29.7192C56.4058 29.7967 56.2451 29.9039 56.1334 30.0406C56.0217 30.1751 55.9659 30.3484 55.9659 30.5604C55.9659 30.8795 56.0798 31.1269 56.3078 31.3024C56.5358 31.4757 56.8219 31.5623 57.1661 31.5623ZM60.4608 32V31.4255H60.6249C60.8118 31.4255 60.9623 31.3913 61.0763 31.3229C61.1925 31.2523 61.2826 31.1337 61.3464 30.9673C61.4102 30.8009 61.4581 30.5741 61.49 30.2868C61.5219 29.9996 61.547 29.6394 61.5653 29.2063L61.6781 26.7477H65.0155V32H64.4034V27.3221H62.256L62.1568 29.4115C62.1363 29.8377 62.1021 30.2127 62.0542 30.5365C62.0087 30.8602 61.9334 31.1303 61.8286 31.3469C61.726 31.5634 61.5824 31.7264 61.3977 31.8359C61.2153 31.9453 60.976 32 60.6796 32H60.4608ZM67.1347 28.7754H68.6701C69.2605 28.7754 69.7165 28.919 70.0379 29.2063C70.3593 29.4935 70.52 29.8822 70.52 30.3723C70.52 30.6983 70.4482 30.9833 70.3046 31.2272C70.161 31.4711 69.9513 31.6615 69.6754 31.7983C69.3996 31.9328 69.0645 32 68.6701 32H66.6287V26.7477H67.2373V31.4255H68.6701C69.0417 31.4255 69.3415 31.3366 69.5694 31.1588C69.7974 30.981 69.9114 30.728 69.9114 30.3997C69.9114 30.0646 69.7974 29.8058 69.5694 29.6235C69.3415 29.4411 69.0417 29.3499 68.6701 29.3499H67.1347V28.7754ZM75.4031 29.09V29.6645H72.3153V29.09H75.4031ZM72.4657 26.7477V32H71.8571V26.7477H72.4657ZM75.851 26.7477V32H75.2423V26.7477H75.851ZM77.9839 28.7754H79.5227C80.1131 28.7754 80.569 28.919 80.8905 29.2063C81.2119 29.4935 81.3726 29.8822 81.3726 30.3723C81.3726 30.6983 81.2997 30.9833 81.1538 31.2272C81.0102 31.4711 80.8004 31.6615 80.5246 31.7983C80.2488 31.9328 79.9148 32 79.5227 32H77.4778V26.7477H78.0899V31.4255H79.5227C79.8943 31.4255 80.1929 31.3366 80.4186 31.1588C80.6466 30.981 80.7605 30.728 80.7605 30.3997C80.7605 30.0646 80.6466 29.8058 80.4186 29.6235C80.1929 29.4411 79.8943 29.3499 79.5227 29.3499H77.9839V28.7754ZM82.2583 32V26.7477H82.8669V32H82.2583ZM85.0947 31.1349L87.8679 26.7477H88.5963V32H87.9876V27.6128L85.2247 32H84.4861V26.7477H85.0947V31.1349ZM87.1704 24.9969H87.7448C87.7448 25.3229 87.6365 25.5873 87.42 25.7902C87.2057 25.9931 86.9128 26.0946 86.5412 26.0946C86.1741 26.0946 85.8835 25.9931 85.6692 25.7902C85.4549 25.5873 85.3478 25.3229 85.3478 24.9969H85.9222C85.9222 25.1747 85.9701 25.3252 86.0659 25.4483C86.1639 25.5691 86.3223 25.6295 86.5412 25.6295C86.76 25.6295 86.9196 25.5691 87.0199 25.4483C87.1202 25.3252 87.1704 25.1747 87.1704 24.9969ZM92.9185 32V26.7477H96.8954V32H96.2833V27.3221H93.5306V32H92.9185ZM100.548 32.1094C100.095 32.1094 99.6934 31.9943 99.3446 31.7641C98.9981 31.5338 98.7268 31.2158 98.5307 30.81C98.3347 30.402 98.2367 29.9312 98.2367 29.3978C98.2367 28.8598 98.3347 28.3867 98.5307 27.9787C98.7268 27.5683 98.9981 27.2492 99.3446 27.0212C99.6934 26.791 100.095 26.6759 100.548 26.6759C101.002 26.6759 101.402 26.791 101.748 27.0212C102.095 27.2515 102.366 27.5706 102.562 27.9787C102.761 28.3867 102.86 28.8598 102.86 29.3978C102.86 29.9312 102.762 30.402 102.566 30.81C102.37 31.2158 102.097 31.5338 101.748 31.7641C101.402 31.9943 101.002 32.1094 100.548 32.1094ZM100.548 31.552C100.913 31.552 101.222 31.454 101.475 31.258C101.728 31.0619 101.919 30.8009 102.049 30.4749C102.182 30.1489 102.248 29.7899 102.248 29.3978C102.248 29.0057 102.182 28.6455 102.049 28.3172C101.919 27.9889 101.728 27.7256 101.475 27.5273C101.222 27.329 100.913 27.2298 100.548 27.2298C100.186 27.2298 99.8769 27.329 99.6216 27.5273C99.3685 27.7256 99.1759 27.9889 99.0437 28.3172C98.9137 28.6455 98.8488 29.0057 98.8488 29.3978C98.8488 29.7899 98.9137 30.1489 99.0437 30.4749C99.1759 30.8009 99.3685 31.0619 99.6216 31.258C99.8746 31.454 100.183 31.552 100.548 31.552ZM106.942 31.1485L108.915 26.7477H109.506L107.185 32H106.699L104.405 26.7477H104.986L106.942 31.1485ZM104.805 26.7477V32H104.196V26.7477H104.805ZM109.079 32V26.7477H109.688V32H109.079ZM113.347 32.1094C112.893 32.1094 112.492 31.9943 112.143 31.7641C111.796 31.5338 111.525 31.2158 111.329 30.81C111.133 30.402 111.035 29.9312 111.035 29.3978C111.035 28.8598 111.133 28.3867 111.329 27.9787C111.525 27.5683 111.796 27.2492 112.143 27.0212C112.492 26.791 112.893 26.6759 113.347 26.6759C113.8 26.6759 114.2 26.791 114.547 27.0212C114.893 27.2515 115.165 27.5706 115.361 27.9787C115.559 28.3867 115.658 28.8598 115.658 29.3978C115.658 29.9312 115.56 30.402 115.364 30.81C115.168 31.2158 114.896 31.5338 114.547 31.7641C114.2 31.9943 113.8 32.1094 113.347 32.1094ZM113.347 31.552C113.711 31.552 114.02 31.454 114.273 31.258C114.526 31.0619 114.718 30.8009 114.848 30.4749C114.98 30.1489 115.046 29.7899 115.046 29.3978C115.046 29.0057 114.98 28.6455 114.848 28.3172C114.718 27.9889 114.526 27.7256 114.273 27.5273C114.02 27.329 113.711 27.2298 113.347 27.2298C112.984 27.2298 112.675 27.329 112.42 27.5273C112.167 27.7256 111.974 27.9889 111.842 28.3172C111.712 28.6455 111.647 29.0057 111.647 29.3978C111.647 29.7899 111.712 30.1489 111.842 30.4749C111.974 30.8009 112.167 31.0619 112.42 31.258C112.673 31.454 112.982 31.552 113.347 31.552ZM123.785 31.4255L123.69 33.508H123.088V32H122.431V31.4255H123.785ZM116.994 26.7477H117.603V31.4255H119.757V26.7477H120.366V31.4255H122.52V26.7477H123.129V32H116.994V26.7477ZM128.58 29.09V29.6645H125.493V29.09H128.58ZM125.643 26.7477V32H125.034V26.7477H125.643ZM129.028 26.7477V32H128.42V26.7477H129.028ZM131.257 31.1349L134.03 26.7477H134.758V32H134.15V27.6128L131.387 32H130.648V26.7477H131.257V31.1349ZM136.366 32V26.7477H136.974V29.1105H137.545L139.498 26.7477H140.284L138.178 29.2747L140.332 32H139.546L137.733 29.685H136.974V32H136.366Z" fill="#787878"/>
                        <path d="M0 0.346292H19.9613V4.84809H6.95058V7.14846H19.6892V11.675H6.95058V18.7492H0V0.346292Z" fill="white"/>
                        <path d="M34.8184 0H35.9315C37.564 0 39.0481 0.115431 40.3838 0.346292C41.736 0.560663 42.8656 0.84924 43.7725 1.21202C44.696 1.55831 45.4957 1.9953 46.1718 2.52298C46.8644 3.03418 47.4086 3.55362 47.8043 4.0813C48.2001 4.60898 48.5134 5.18614 48.7443 5.81276C48.9916 6.43938 49.1483 7.00829 49.2142 7.51948C49.2967 8.03068 49.3379 8.56661 49.3379 9.12727V9.86932C49.3379 10.43 49.2967 10.9659 49.2142 11.4771C49.1483 11.9883 48.9916 12.5655 48.7443 13.2086C48.5134 13.8352 48.2001 14.4206 47.8043 14.9648C47.4251 15.4924 46.8891 16.0201 46.1966 16.5478C45.504 17.0755 44.7042 17.5207 43.7972 17.8835C42.8903 18.2463 41.7607 18.5349 40.4085 18.7492C39.0728 18.9801 37.5805 19.0955 35.9315 19.0955H34.8184C33.1694 19.0955 31.6688 18.9801 30.3166 18.7492C28.9809 18.5349 27.8513 18.2463 26.9279 17.8835C26.0209 17.5207 25.2212 17.0755 24.5286 16.5478C23.836 16.0201 23.2918 15.4924 22.896 14.9648C22.5168 14.4206 22.2035 13.8352 21.9561 13.2086C21.7253 12.5655 21.5686 11.9883 21.4861 11.4771C21.4202 10.9659 21.3872 10.43 21.3872 9.86932V9.12727C21.3872 8.56661 21.4202 8.03068 21.4861 7.51948C21.5686 7.00829 21.7253 6.43938 21.9561 5.81276C22.2035 5.18614 22.5168 4.60898 22.896 4.0813C23.2918 3.55362 23.836 3.03418 24.5286 2.52298C25.2212 1.9953 26.0209 1.55831 26.9279 1.21202C27.8513 0.84924 28.9809 0.560663 30.3166 0.346292C31.6688 0.115431 33.1694 0 34.8184 0ZM42.0658 9.64671V9.30042C42.0658 8.75624 41.9669 8.25329 41.769 7.79157C41.5711 7.31336 41.233 6.85164 40.7548 6.4064C40.2931 5.96117 39.6005 5.60663 38.6771 5.34279C37.7536 5.07895 36.6488 4.94703 35.3626 4.94703C34.0434 4.94703 32.922 5.07895 31.9986 5.34279C31.0751 5.60663 30.3826 5.96117 29.9208 6.4064C29.4591 6.85164 29.1293 7.31336 28.9314 7.79157C28.75 8.25329 28.6593 8.75624 28.6593 9.30042V9.59724C28.6593 10.1414 28.7583 10.6608 28.9562 11.1556C29.154 11.6338 29.4838 12.112 29.9456 12.5902C30.4073 13.0519 31.0999 13.4229 32.0233 13.7033C32.9633 13.9836 34.0763 14.1238 35.3626 14.1238C36.6488 14.1238 37.7536 13.9918 38.6771 13.728C39.617 13.4477 40.3178 13.0766 40.7796 12.6149C41.2413 12.1532 41.5711 11.6832 41.769 11.205C41.9669 10.7103 42.0658 10.1909 42.0658 9.64671Z" fill="white"/>
                        <path d="M63.9015 0H65.0146C66.6471 0 68.1312 0.115431 69.4669 0.346292C70.8191 0.560663 71.9487 0.84924 72.8556 1.21202C73.7791 1.55831 74.5789 1.9953 75.255 2.52298C75.9475 3.03418 76.4917 3.55362 76.8875 4.0813C77.2832 4.60898 77.5965 5.18614 77.8274 5.81276C78.0748 6.43938 78.2314 7.00829 78.2974 7.51948C78.3798 8.03068 78.421 8.56661 78.421 9.12727V9.86932C78.421 10.43 78.3798 10.9659 78.2974 11.4771C78.2314 11.9883 78.0748 12.5655 77.8274 13.2086C77.5965 13.8352 77.2832 14.4206 76.8875 14.9648C76.5082 15.4924 75.9723 16.0201 75.2797 16.5478C74.5871 17.0755 73.7873 17.5207 72.8804 17.8835C71.9734 18.2463 70.8438 18.5349 69.4917 18.7492C68.156 18.9801 66.6636 19.0955 65.0146 19.0955H63.9015C62.2525 19.0955 60.7519 18.9801 59.3997 18.7492C58.064 18.5349 56.9344 18.2463 56.011 17.8835C55.104 17.5207 54.3043 17.0755 53.6117 16.5478C52.9191 16.0201 52.3749 15.4924 51.9792 14.9648C51.5999 14.4206 51.2866 13.8352 51.0392 13.2086C50.8084 12.5655 50.6517 11.9883 50.5693 11.4771C50.5033 10.9659 50.4703 10.43 50.4703 9.86932V9.12727C50.4703 8.56661 50.5033 8.03068 50.5693 7.51948C50.6517 7.00829 50.8084 6.43938 51.0392 5.81276C51.2866 5.18614 51.5999 4.60898 51.9792 4.0813C52.3749 3.55362 52.9191 3.03418 53.6117 2.52298C54.3043 1.9953 55.104 1.55831 56.011 1.21202C56.9344 0.84924 58.064 0.560663 59.3997 0.346292C60.7519 0.115431 62.2525 0 63.9015 0ZM71.1489 9.64671V9.30042C71.1489 8.75624 71.05 8.25329 70.8521 7.79157C70.6542 7.31336 70.3162 6.85164 69.838 6.4064C69.3762 5.96117 68.6836 5.60663 67.7602 5.34279C66.8368 5.07895 65.7319 4.94703 64.4457 4.94703C63.1265 4.94703 62.0052 5.07895 61.0817 5.34279C60.1583 5.60663 59.4657 5.96117 59.004 6.4064C58.5422 6.85164 58.2124 7.31336 58.0145 7.79157C57.8332 8.25329 57.7425 8.75624 57.7425 9.30042V9.59724C57.7425 10.1414 57.8414 10.6608 58.0393 11.1556C58.2372 11.6338 58.567 12.112 59.0287 12.5902C59.4904 13.0519 60.183 13.4229 61.1064 13.7033C62.0464 13.9836 63.1595 14.1238 64.4457 14.1238C65.7319 14.1238 66.8368 13.9918 67.7602 13.728C68.7001 13.4477 69.401 13.0766 69.8627 12.6149C70.3244 12.1532 70.6542 11.6832 70.8521 11.205C71.05 10.7103 71.1489 10.1909 71.1489 9.64671Z" fill="white"/>
                        <path d="M80.1718 18.7492V0.346292H93.232C95.2768 0.346292 97.0907 0.511193 98.6737 0.840994C100.257 1.1708 101.535 1.60778 102.508 2.15196C103.481 2.69613 104.272 3.35574 104.882 4.13077C105.509 4.9058 105.938 5.68908 106.168 6.48061C106.399 7.27213 106.515 8.12962 106.515 9.05306V9.79512C106.515 10.7021 106.408 11.5513 106.193 12.3428C105.995 13.1344 105.591 13.9341 104.981 14.7421C104.388 15.5502 103.613 16.2427 102.656 16.8199C101.716 17.3806 100.438 17.8423 98.8221 18.2051C97.2226 18.5679 95.3675 18.7492 93.2567 18.7492H80.1718ZM87.1966 5.16965V13.8764H92.4157C96.9505 13.8764 99.2179 12.4418 99.2179 9.5725V9.42409C99.2179 6.58779 96.9505 5.16965 92.4157 5.16965H87.1966Z" fill="white"/>
                        <path d="M121.81 11.1803L118.718 4.84809L115.7 11.1803H121.81ZM125.496 18.7492L124.061 15.781H113.548L112.139 18.7492H105.015L114.117 0.346292H123.566L133.188 18.7492H125.496Z" fill="white"/>
                        <path d="M140.99 0.346292V18.7492H133.99V0.346292H140.99Z" fill="white"/>
                        <path d="M36.8127 13.2492C36.8127 12.4208 37.4843 11.7492 38.3127 11.7492H39.3127C40.1411 11.7492 40.8127 12.4208 40.8127 13.2492C40.8127 14.0777 40.1411 14.7492 39.3127 14.7492H38.3127C37.4843 14.7492 36.8127 14.0777 36.8127 13.2492Z" fill="white"/>
                        <path d="M65.8127 13.2492C65.8127 12.4208 66.4843 11.7492 67.3127 11.7492H68.3127C69.1411 11.7492 69.8127 12.4208 69.8127 13.2492C69.8127 14.0777 69.1411 14.7492 68.3127 14.7492H67.3127C66.4843 14.7492 65.8127 14.0777 65.8127 13.2492Z" fill="white"/>
                    </svg>
                </div>
                {!isCollapsed && (
                    <>
                        <div className="messages-container">
                            {messages.map((msg, index) => (
                                <div key={index} className={`message ${msg.isUser ? 'user-message' : 'ai-message'}`}>
                                    <div className="message-content">
                                        {msg.text}
                                    </div>
                                </div>
                            ))}
                            {isLoading && (
                                <div className="message ai-message">
                                    <div className="message-content">
                                        FOODAI печатает...
                                    </div>
                                </div>
                            )}
                            <div ref={messagesEndRef} />
                        </div>
                        <div className="input-container">
                            <input
                                value={inputText}
                                onChange={(e) => setInputText(e.target.value)}
                                onKeyPress={handleKeyPress}
                                disabled={isLoading}
                                placeholder="Введите текст..."
                                className="chat-input"
                            />
                            <button onClick={handleSend} disabled={isLoading} className="send-button">
                                <svg width="19" height="21" viewBox="0 0 19 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M18.1189 8.94102L2.48763 0.214321C1.17494 -0.520371 -0.34501 0.7519 0.0695222 2.2392L2.21127 10.0162C2.29763 10.3387 2.29763 10.6613 2.21127 10.9838L0.0695222 18.7608C-0.34501 20.2481 1.17494 21.5204 2.48763 20.7857L18.1189 12.059C18.3856 11.9078 18.6081 11.685 18.7632 11.4138C18.9182 11.1426 19 10.8332 19 10.5179C19 10.2027 18.9182 9.8932 18.7632 9.62204C18.6081 9.35088 18.3856 9.12803 18.1189 8.97686V8.94102Z" fill="white" />
                                </svg>
                            </button>
                        </div>
                    </>
                )}
            </div>

            <div className={`cart-container ${isCartCollapsed ? 'cart-container-collapsed' : ''} ${isLaptop ? 'laptop' : ''}`}>
                <div className="cart-header" onClick={toggleCart}>
                    <h2>Корзина</h2>
                </div>
                {!isCartCollapsed && (
                    <>
                        <div className="cart-items">
                            {cart.length > 0 ? (
                                cart.map((item, index) => (
                                    <div key={index} className="cart-item">
                                        <div className="item-controls">
                                            <div className="quantity-controls">
                                                <button className="quantity-btn" onClick={() => { /* Логика минус */ }}>-</button>
                                                <span className="quantity">{item.quantity}</span>
                                                <button className="quantity-btn" onClick={() => { /* Логика плюс */ }}>+</button>
                                            </div>
                                            <div className="item-price">{item.price * item.quantity}₽</div>
                                        </div>
                                        <p>{item.name} - {item.weight}</p>
                                    </div>
                                ))
                            ) : (
                                <p></p>
                            )}
                        </div>
                        <div className="delivery-info"> </div>
                        <div className="cart-footer">
                        </div>
                    </>
                )}
            </div>
            

            <div className="order-block">
                {!isCartCollapsed ? (
                    <button className={`order-button-floating ${!isCollapsed && !isCartCollapsed ? 'chat-expanded' : ''}`}>
                    <span>Заказать</span>
                    <span className="end">{totalCost}₽</span>
                    </button>
            ) : null}
            </div>
        </>
    );
}

export default LLamaChat;