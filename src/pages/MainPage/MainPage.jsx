import React, { useEffect, useState } from 'react';
import { Helmet } from 'react-helmet';

import CarouselVeg from '../../components/CarouselVeg/CarouselVeg';
import Carousel from '../../components/Carousel/Carousel';
import CarouselBer from '../../components/CarouselBer/CarouselBer';
import LLamaChatV3 from '../../components/LLamaChat/LLamaChatV3';
import './MainPage.css';
import Button from '../../components/ui/Button';
import ProductCard from '../../components/ui/ProductCard';
import Skeleton from '../../components/ui/Skeleton';
import Empty from '../../components/ui/Empty';
import supabase from '../../supabaseClient';
import { useCart } from '../../components/Carousel/CartContext';
import FilterChip from '../../components/ui/FilterChip';

function MainPage() {
  const { addToCart } = useCart();
  const [loading, setLoading] = useState(true);
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [deals, setDeals] = useState([]);
  const [reorders, setReorders] = useState([]);
  const [together, setTogether] = useState([]);
  const [activeTags, setActiveTags] = useState([]);
  const [bundles, setBundles] = useState([]);
  const [activeCategory, setActiveCategory] = useState(null);

  useEffect(() => {
    let isMounted = true;
    (async () => {
      try {
        const [prodRes, catRes, dealRes] = await Promise.all([
          supabase.from('products').select('*').limit(12),
          supabase.from('categories').select('*').limit(12),
          supabase.from('deals').select('*').limit(6)
        ]);
        // Reorders: –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const ordersRes = await supabase.from('orders').select('items').order('created_at', { ascending: false }).limit(3);
        const orderedItems = (ordersRes.data || []).flatMap(o => o.items || []);
        // –ß–∞—Å—Ç–æ –±–µ—Ä—É—Ç –≤–º–µ—Å—Ç–µ: —É–ø—Ä–æ—â—ë–Ω–Ω–æ –±–µ—Ä—ë–º —Ç–æ–ø –ø–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ –∏–º—ë–Ω
        const nameCount = new Map();
        for (const it of orderedItems) { nameCount.set(it.name, (nameCount.get(it.name) || 0) + 1); }
        const topNames = Array.from(nameCount.entries()).sort((a,b)=>b[1]-a[1]).slice(0,6).map(([n])=>n);
        const togetherRes = topNames.length ? await supabase.from('products').select('*').in('name', topNames) : { data: [] };
        if (!isMounted) return;
        setProducts(prodRes.data || []);
        setCategories(catRes.data || []);
        setDeals(dealRes.data || []);
        setReorders(orderedItems.slice(0,6));
        setTogether(togetherRes.data || []);

        // –°–º–∞—Ä—Ç-–Ω–∞–±–æ—Ä—ã: –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –ø–æ —Ç–µ–≥–∞–º –∏ —Ü–µ–Ω–µ
        const prods = prodRes.data || [];
        const pick = (fn, limit=5) => prods.filter(fn).slice(0, limit);
        const econ = pick(p => (p.tags||[]).includes('–∞–∫—Ü–∏–∏') || (p.price||0) < 200, 6);
        const vitamins = pick(p => (p.tags||[]).includes('—Ñ—Ä—É–∫—Ç—ã') || (p.tags||[]).includes('–æ–≤–æ—â–∏'), 6);
        const week = pick(() => true, 10);
        setBundles([
          { id: 'econ', title: '–ö–æ—Ä–∑–∏–Ω–∞ —ç–∫–æ–Ω–æ–º', items: econ },
          { id: 'vit', title: '–ö–æ—Ä–∑–∏–Ω–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤', items: vitamins },
          { id: 'week', title: '–†–∞—Ü–∏–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é', items: week },
        ]);
      } catch (e) {
        console.error(e);
      } finally {
        if (isMounted) setLoading(false);
      }
    })();
    return () => { isMounted = false; };
  }, []);

  const toggleTag = (tag) => {
    setActiveTags(prev => prev.includes(tag) ? prev.filter(t => t !== tag) : [...prev, tag]);
  };

  const filteredProducts = !activeTags.length ? products : products.filter(p => {
    const tags = (p.tags || []).map(String);
    return activeTags.every(t => tags.includes(t));
  });

  const productsByCategory = (cat) => {
    if (!cat) return filteredProducts;
    return filteredProducts.filter(p => String(p.category_slug || p.category) === String(cat));
  };
  return (
    <>
      <Helmet>
        <title>FOODAI</title>
      </Helmet>
    <main className="main-page">
      {/* Hero section */}
      <section className="hero">
        <div className="hero-content">
          <h1>–î–æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ</h1>
          <p>–°–≤–µ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã, –∞–∫—Ü–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.</p>
          <div className="hero-cta">
            <Button variant="primary" size="lg">–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã</Button>
            <span className="hero-note">–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 15 –º–∏–Ω—É—Ç</span>
          </div>
        </div>
      </section>

      {/* Benefits strip */}
      <section className="benefits">
        <div className="benefit">
          <div className="benefit-icon">üöÄ</div>
          <div className="benefit-text">–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</div>
        </div>
        <div className="benefit">
          <div className="benefit-icon">ü•¨</div>
          <div className="benefit-text">–í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ</div>
        </div>
        <div className="benefit">
          <div className="benefit-icon">üí≥</div>
          <div className="benefit-text">–£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞</div>
        </div>
        <div className="benefit">
          <div className="benefit-icon">‚≠ê</div>
          <div className="benefit-text">–í—ã–±–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</div>
        </div>
      </section>

      {/* Category quick bar */}
      <div className="cat-bar">
        <div className="cat-bar__inner">
          <button className={`cat-pill ${!activeCategory ? 'cat-pill--active':''}`} onClick={()=>setActiveCategory(null)}>–í—Å–µ</button>
          {categories.map(cat => (
            <button key={cat.id} className={`cat-pill ${activeCategory===(cat.slug||cat.id)?'cat-pill--active':''}`} onClick={()=>setActiveCategory(cat.slug||cat.id)}>
              {cat.emoji || 'üõí'} {cat.name}
            </button>
          ))}
        </div>
      </div>

      {/* Categories grid */}
      <section className="categories">
        <h2 className="section-title">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <div className="categories-grid">
          {loading && Array.from({length:6}).map((_,i)=> (
            <div key={i} className="category-card"><Skeleton height={80} /></div>
          ))}
          {!loading && categories.length === 0 && (
            <Empty title="–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π" description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" />
          )}
          {!loading && categories.map(cat => (
            <a className="category-card" key={cat.id} href={`#cat-${cat.slug || cat.id}`} onClick={(e)=>{e.preventDefault(); setActiveCategory(cat.slug||cat.id);}}>
              <div className="category-emoji">{cat.emoji || 'üõí'}</div>
              <span>{cat.name}</span>
            </a>
          ))}
        </div>
      </section>

      {/* Deals row */}
      <section className="deals">
        <h2 className="section-title">–ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h2>
        <div className="deals-row">
          {loading && Array.from({length:3}).map((_,i)=> (
            <div className="deal-card" key={i}><Skeleton height={120} /></div>
          ))}
          {!loading && deals.length === 0 && (
            <Empty title="–ê–∫—Ü–∏–π –Ω–µ—Ç" description="–ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ" />
          )}
          {!loading && deals.map(deal => (
            <div className="deal-card" key={deal.id}>
              <span className="deal-badge">{deal.badge || 'SALE'}</span>
              <h3>{deal.title}</h3>
              <p>{deal.subtitle}</p>
              <button className="deal-button">{deal.cta || '–ö –ø–æ–∫—É–ø–∫–∞–º'}</button>
            </div>
          ))}
        </div>
      </section>

      {/* Delivery info strip */}
      <section className="delivery-strip">
        <div className="delivery-item">
          <span className="dot"></span>
          <div>
            <div className="delivery-title">–í –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ</div>
            <div className="delivery-sub">—Å–µ–≥–æ–¥–Ω—è —Å 10:00 –¥–æ 22:00</div>
          </div>
        </div>
        <div className="delivery-item">
          <span className="dot"></span>
          <div>
            <div className="delivery-title">–°–∞–º–æ–≤—ã–≤–æ–∑</div>
            <div className="delivery-sub">–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–µ</div>
          </div>
        </div>
        <div className="delivery-item">
          <span className="dot"></span>
          <div>
            <div className="delivery-title">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1500 ‚ÇΩ</div>
            <div className="delivery-sub">–ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É FOODAI</div>
          </div>
        </div>
      </section>

      {/* Recommended products */}
      <section className="deals">
        <h2 className="section-title">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∞–º</h2>
        <div style={{display:'flex', gap:8, flexWrap:'wrap', margin:'8px 0 12px 0'}}>
          {['–±–µ–∑ —Å–∞—Ö–∞—Ä–∞','–≤–µ–≥–∞–Ω','–±–µ–∑ –ª–∞–∫—Ç–æ–∑—ã','–∞–∫—Ü–∏–∏'].map(tag => (
            <FilterChip key={tag} active={activeTags.includes(tag)} onClick={() => toggleTag(tag)}>{tag}</FilterChip>
          ))}
        </div>
        <div className="deals-row">
          {loading && Array.from({length:3}).map((_,i)=> (
            <div key={i}><Skeleton height={250} /></div>
          ))}
          {!loading && products.length === 0 && (
            <Empty title="–ü—É—Å—Ç–æ" description="–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" />
          )}
          {!loading && productsByCategory(activeCategory).slice(0,6).map(p => (
            <ProductCard key={p.id} product={p} onAdd={addToCart} />
          ))}
        </div>
      </section>

      {/* Reorder */}
      <section className="deals">
        <h2 className="section-title">–ö—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞</h2>
        <div className="deals-row">
          {loading && Array.from({length:3}).map((_,i)=> (
            <div key={i}><Skeleton height={250} /></div>
          ))}
          {!loading && reorders.length === 0 && (
            <Empty title="–ü–æ–∫–∞ –ø—É—Å—Ç–æ" description="–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑" />
          )}
          {!loading && reorders.map((it, idx) => (
            <ProductCard key={idx} product={it} onAdd={addToCart} />
          ))}
        </div>
      </section>

      {/* Frequently bought together */}
      <section className="deals">
        <h2 className="section-title">–ß–∞—Å—Ç–æ –±–µ—Ä—É—Ç –≤–º–µ—Å—Ç–µ</h2>
        <div className="deals-row">
          {loading && Array.from({length:3}).map((_,i)=> (
            <div key={i}><Skeleton height={250} /></div>
          ))}
          {!loading && together.length === 0 && (
            <Empty title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" description="–ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ" />
          )}
          {!loading && together.map(p => (
            <ProductCard key={p.id} product={p} onAdd={addToCart} />
          ))}
        </div>
      </section>

      {/* Smart bundles */}
      <section className="deals">
        <h2 className="section-title">–°–º–∞—Ä—Ç‚Äë–Ω–∞–±–æ—Ä—ã</h2>
        <div className="deals-row">
          {loading && Array.from({length:3}).map((_,i)=> (
            <div key={i}><Skeleton height={250} /></div>
          ))}
          {!loading && bundles.length === 0 && (
            <Empty title="–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤" description="–ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ" />
          )}
          {!loading && bundles.map(b => (
            <div key={b.id} className="ui-card">
              <div className="section-title" style={{margin:'0 0 8px 0'}}>{b.title}</div>
              <div style={{display:'grid', gridTemplateColumns:'repeat(3, 1fr)', gap:16}}>
                {b.items.slice(0,3).map(it => (
                  <ProductCard key={it.id || it.name} product={it} onAdd={addToCart} />
                ))}
              </div>
              <div style={{marginTop:12}}>
                <Button variant="secondary" size="md">–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä</Button>
              </div>
            </div>
          ))}
        </div>
      </section>
    </main>
    <LLamaChatV3></LLamaChatV3>
    </>
  );
}

export default MainPage;